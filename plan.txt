============================== DAY 1 ====================================



AngularJS basics 
	+ MVC concept, MVVM concept, decoupling data, logic and DOM
	+ 2-way data binding concept 
	+ Declarative programming concept
	+ Framework history
	+ AngularJS pros and cons

Module concept
	+ Modules definition
	+ Modules retrieving
	+ Dependency injection
		+ ad-hoc serving
		+ modularity
	+ Main module and Angular application bootstrapping
	- injecting custom module
	
Directive concept basics
	+ Extending basic HTML with custom elements, attributes and interactions
	+ Declarative way of expression

Scope concept
	+ Coupling logic and view
	+ Model incapsulation
	+ API for model changes watching
	- API for listening / broadcasting events
	+ Nesting scopes
	+ Scopes inheritanse and method / property lookup
	+ Digest loops and dirty checking

Controller concept
	+ Class pattern
	+ Coupling controller to DOM
	+ Exposing controller props and methods to view using "as" notation.
	+ Exposing controller props and methods to view using scope.
	+ Nesting controllers and scopes, calling parent scope methods

Templating
	+ ng-bind
	+ Expressions and built in variables
	+ Built-in directives: (ng-repeat, ng-model, ng-show/ng-hide, ng-if, ng-<event>)
	+ ng-form, ng-href, ng-src as a workarounds for potential issues
	+ ng-include
	+ Forgiving object definition

Filter concept
	+ Changing presentation, leaving model intact
	+ Built-in filters (json, lowercase/uppercase, number, filter)
	+ Passing params to filters
	+ Chaining filters
	+ Filters pros and cons (performance impact)
	+ "Filtered as" syntax
	- Custom filter



============================== DAY 2 ====================================



Service concept
	+ Singltone pattern
	+ Factory pattern
	+ Provider
	+ Built-in services ($window, $timeout, $interval, $http)
	+ $http service and promise concept
	+ Custom properties of $http promise
	- $resource service
	+ $q service, deferred objects and custom promises
	+ multiple promises handling
	+ $q.when(), $q.reject()



============================== DAY 3 ====================================



Routing concept
	+ service provider concept on example
	+ hash based navigation (from named anchors to modern techniques)
	+ Config section: $routeProvider, .when(), .otherwise()
	+ run section (login case)
	+ other sections: .value(), .constant()
	+ External templates
	+ Page controllers
	+ resolve section (waiting for promises to be resolved, error handling)
	+ Route parameters, $routeParams
	+ Route events ($routeChangeStart, $routeChangeSuccess, $routeChangeError, $routeUpdate)
	+ $location service: .url(), .protocol(), .host(), .path(), .search()
	+ chaining $location methods: $location.search().replace()
	- Location events: $locationChangeStart, $locationChangeSuccess
	+ two-way binding between query string and controller data
	+ $http interceptors (login case)
	- HTML5 navigation 



============================== DAY 4 ====================================



Directives in-depth
	+ Directive definition object:
		+ restrict: 'AECM'
		+ replace: Boolean
		+ template: String / Function
		+ templateUrl: String / Function
		+ scope: Boolean / Object

============================== DAY 5 ====================================

		+ controller: Function / String
		+ controllerAs
		+ bindToController
		+ require
		+ compile: Function (returning object / function)
		+ link (postlink): Function (only if compile is not defined)
		+ priority: (multiple directives on single DOM element) = 0
		+ transclude

	+ Templateless directives
	+ Templates (internal, external, dynamically assigned)
	+ Scopes: parent, inherited, isolated. Passing data into isolated scope:
		+ '@' attrs
		+ '=' bindings
		+ '&' expression

============================== DAY 6 ====================================

	+ Controllers, requiring external controllers:
		+ sharing a controller
		+ sharing the same instance of a controller (require, '?', '', '^', '^^')
		+ controllerAs: String
		+ bindToController: Boolean

	+ Compile phase 
		+ runs once for each directive (not for each instance, ng-repeat as an example)
		+ runs before scope is created
		+ receives source template, not the real element (instance template)

	+ Controller runs after that and receives scope and element reference

	+ Link phases (runs for each directive instance):
		+ prelink (before template is linked to the scope and children link functions are executed)
		+ postlink (after template is linked to the scope and children link functions are executed) the only required option in DDO

	+ Transclusion (transition and inclusion): 
		+ definition in template,
		+ transcluded scope,
		- transcludeFunction
	
	+ compiling and linking phses order in nested directives
	
For further reading:
	compile, prelink and postlink in depth:
	http://odetocode.com/blogs/scott/archive/2014/05/28/compile-pre-and-post-linking-in-angularjs.aspx
	http://stackoverflow.com/questions/24615103/angular-directives-when-and-how-to-use-compile-controller-pre-link-and-post/24615207
	transclusion in depth:
	http://teropa.info/blog/2015/06/09/transclusion.html


============================== DAY 7 ====================================

App structure:
	+ main module, injecting dependencies
	+ run, value, constant
	+ config, routes, hash based navigation
	+ outer controllers
	+ page controllers
	+ widget controllers
	+ reusable components, directives, nested directives, directives with external templates
	+ isolated scope directives flow: data in, callback out


NG-PDK issues discussion:
	+ WORK WITH DATA, NOT WITH DOM!!!111ONEONEONE
	+ NO WORKING WITH DOM OR SCOPE IN SERVICE!!!1111
	+ "dot in models": object vs. primitives (but better not to change parent scope at all)

For further reading:
	"dot in models" issue explained:
	http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs/14049482#14049482


ng-pdk refactoring:
	+ Getting rid of Jade and migrating to native html
	+ Refactoring directive templates to bring some declarativeness
	+ DisplayWhen directiveservice: why is it bad and how to make things better
	+ $templateCache 
	+ Grunt / Gulp / Webpack as a single build tool
	+ npm as a single entry point
	+ Getting rid of Graddle (no error logs, can't be installed with npm, useless on frontend)


============================== DAY 8 ====================================

Discussing homework

Custom filter best practises

Dependency injections:
	+ Orderer arguments vs. named arguments
	+ array annotation
	+ $inject

============================== DAY 9 ====================================

Discussing homework

Caching external templates:
	- $templateCache.put()
	- $templateCache.get()

ngAnimate

Components
	- serving custom directive as a component: possible approaches
	- extending directives with shared controller and scope

Component router (?)


============================== DAY 10 ====================================


Performance problem and other issues and ways to work around them
	- Filters multiple evaluation, using filters inside controllers and services
	- Scopes isolation, nesting and inheritance
	- ng-if
	- :: one-time binding
	- track by
	- $scope.$digest() vs $scope.$apply and events
	- $scope.$applyAsynch()
	- ng-cloak
	- ng-init and other ways to declare vars and methods silently

Unit testing
	- Toolkit: Jasmine, Karma, PhantomJS, browser launchers.
	- describe()
	- it()
	- beforeEach() and afterEach()
	- Matchers
	- Spies
	- ngMocks and built-in mock objects
	- Dependency injection
	- Custom mocks

Unit testing filter

Unit testing service

Unit testing controller

Unit testing directive

Setting up a very basic project (todo app or something similar)
	- Git
	- Github / Bitbucket
	- NodeJS + npm
	- Grunt
	- Bower (Why use Bower?)

Automated project deployment in depth
	- npm 
		- configuring npm
		- installation workflow: preinstall, installation, postinstall
	- Bower
		- why use Bower?
		- configuring Bower
	- Grunt
		- configuring Grunt
		- collecting Bower components and assets
		- building SCSS
		- collecting external templates
		- building Angular app 
		- annotating component definitions
		- concatenating and minifying scripts
		- linting / hinting
		- running tests
		- publishing and packaging app
		- dev and pub workflow